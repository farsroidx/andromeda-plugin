@file:OptIn(ExperimentalSharedTransitionApi::class)
@file:Suppress("unused")

#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME}
#end

import androidx.compose.animation.ExperimentalSharedTransitionApi
import androidx.compose.foundation.background
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.navigation.NavController
import ir.farsroidx.common.abstracts.ComposablePreview
import kotlinx.serialization.Serializable

@Serializable
object ${NAME}Destination

@Composable
fun ${NAME}ScreenBuilder(
    navController: NavController,
    viewModel: ${NAME}ViewModel = hiltViewModel()
) {

    val uiState by viewModel.uiStateFlow.collectAsStateWithLifecycle()
    val uiEvent by viewModel.uiEventFlow.collectAsStateWithLifecycle()

    ${NAME}Screen(
        uiState  = uiState,
        uiEvent  = uiEvent,
        onAction = viewModel::onAction,
        onOthers = {
            /* Default implementation does nothing */
        }
    )
}

@Composable
private fun ${NAME}Screen(
    uiState: ${NAME}UiState,
    uiEvent: ${NAME}UiEvent? = null,
    onAction: (${NAME}UiAction) -> Unit = { /* Default implementation does nothing */ },
    onOthers: () -> Unit = { /* Default implementation does nothing */ },
) {

    Scaffold { innerPadding ->

        Box(
            modifier = Modifier
                .background(MaterialTheme.colorScheme.background)
                .padding(innerPadding)
                .fillMaxSize()
            ,
            contentAlignment = Alignment.Center
        ) {

            Text(text = "This is a simple text")

        }
    }
}

@Composable
@ComposablePreview
private fun ${NAME}Preview() {

    MaterialTheme(
        colorScheme = if (isSystemInDarkTheme()) darkColorScheme() else lightColorScheme()
    ) {

        ${NAME}Screen(
            uiState = ${NAME}UiState(),
        )
    }
}